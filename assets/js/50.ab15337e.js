(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{330:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"beanfactory和factorybean的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory和factorybean的区别"}},[a._v("#")]),a._v(" BeanFactory和FactoryBean的区别")]),a._v(" "),t("h2",{attrs:{id:"beanfactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory"}},[a._v("#")]),a._v(" BeanFactory")]),a._v(" "),t("p",[t("code",[a._v("BeanFactory")]),a._v(' 是 Spring 容器的顶级接口，它表示 Spring 框架中用于管理 Bean 生命周期的核心组件，被官方称为 IOC 容器。\n它负责创建、配置和管理程序中所有的 Bean 实例。甚至 ApplicationContext 都是它的子接口，因此，从某种程度上来说，我们一般提到的 "Spring 容器" 其实指就是它。\n'),t("code",[a._v("BeanFactory")]),a._v(" 是最顶级的接口，里面定义了获取和创建 Bean 的最基本方法，它下面又根据功能和抽象级别细分五个接口：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("ListableBeanFactory")]),a._v("：扩展了对 Bean 的批量操作，比如获取所有 Bean 的名称，或者按照类型获取 Bean 等（我们常用的 "),t("code",[a._v("getBeansOfType")]),a._v(" 方法就是它提供的）。")]),a._v(" "),t("li",[t("code",[a._v("HierarchicalBeanFactory")]),a._v("：用于支持层次性的 "),t("code",[a._v("BeanFactory")]),a._v(" 结构，从而实现 "),t("code",[a._v("BeanFactory")]),a._v(" 的嵌套，形成父子关系。")]),a._v(" "),t("li",[t("code",[a._v("AutowireCapableBeanFactory")]),a._v("：用于提供提供对 Bean 自动装配的支持。")]),a._v(" "),t("li",[t("code",[a._v("ConfigurableBeanFactory")]),a._v("：它继承了 AutowireCapableBeanFactory 和 SingletonBeanRegistry ，用于提供包括 "),t("code",[a._v("Scope")]),a._v(" 管理、类加载器、上级工厂、表达式解析器……等等各种配置项。")]),a._v(" "),t("li",[t("code",[a._v("ConfigurableListableBeanFactory")]),a._v("：继承了 "),t("code",[a._v("ConfigurableBeanFactory")]),a._v(" 和 "),t("code",[a._v("ListableBeanFactory")]),a._v("，是集全部 "),t("code",[a._v("BeanFactory")]),a._v(" 接口之大成者。\n它的最底层实现类是 "),t("code",[a._v("DefaultListableBeanFactory")]),a._v("，它直接或间接实现了所有 "),t("code",[a._v("BeanFactory")]),a._v(" 接口，是在项目中最常用的实现类。")])]),a._v(" "),t("h3",{attrs:{id:"_1-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[a._v("#")]),a._v(" 1.基本概念")]),a._v(" "),t("p",[t("code",[a._v("BeanFactory")]),a._v(" 是 Spring 中用于管理 Bean 生命周期的核心组件，Spring 官方文档将其称为 IOC 容器，它即是我们一般俗称的 “Spring 容器”，Bean 的注册、实例化、初始化、依赖注入以及销毁等环节都是通过它完成的。\n它的最下级实现类即为 "),t("code",[a._v("DefaultListableBeanFactory")]),a._v("，我们在 Spring 或者 SpringBoot 中基本上所有的 "),t("code",[a._v("BeanFactory")]),a._v(" 使用的都是它。\n"),t("img",{attrs:{src:"/spring/spring-001.png",alt:"pic"}})]),a._v(" "),t("blockquote",[t("p",[a._v("当我们谈到 BeanFactory 的时候，实际上谈的不止是 BeanFactory 接口本身，而是以 BeanFactory 为基础扩展出的这一套体系。如果我们继续往下看，会发现 BeanFactory的更下层就是 ApplicationContext ，它对应着一个更大的体系。")])]),a._v(" "),t("h3",{attrs:{id:"beanfactory-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-2"}},[a._v("#")]),a._v(" BeanFactory")]),a._v(" "),t("p",[t("code",[a._v("BeanFactory")]),a._v(' 是 Spring 容器的顶级接口，它表示 Spring 框架中用于管理 Bean 生命周期的核心组件，被官方称为 IOC 容器。\n它负责创建、配置和管理程序中所有的 Bean 实例。甚至 ApplicationContext 都是它的子接口，因此，从某种程度上来说，我们一般提到的 "Spring 容器" 其实指就是它。\n'),t("code",[a._v("BeanFactory")]),a._v(" 是最顶级的接口，里面定义了获取和创建 Bean 的最基本方法，它下面又根据功能和抽象级别细分五个接口：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("ListableBeanFactory")]),a._v("：扩展了对 Bean 的批量操作，比如获取所有 Bean 的名称，或者按照类型获取 Bean 等（我们常用的 "),t("code",[a._v("getBeansOfType")]),a._v(" 方法就是它提供的）。")]),a._v(" "),t("li",[t("code",[a._v("HierarchicalBeanFactory")]),a._v("：用于支持层次性的 "),t("code",[a._v("BeanFactory")]),a._v(" 结构，从而实现 "),t("code",[a._v("BeanFactory")]),a._v(" 的嵌套，形成父子关系。")]),a._v(" "),t("li",[t("code",[a._v("AutowireCapableBeanFactory")]),a._v("：用于提供提供对 Bean 自动装配的支持。")]),a._v(" "),t("li",[t("code",[a._v("ConfigurableBeanFactory")]),a._v("：它继承了 AutowireCapableBeanFactory 和 SingletonBeanRegistry ，用于提供包括 "),t("code",[a._v("Scope")]),a._v(" 管理、类加载器、上级工厂、表达式解析器……等等各种配置项。")]),a._v(" "),t("li",[t("code",[a._v("ConfigurableListableBeanFactory")]),a._v("：继承了 "),t("code",[a._v("ConfigurableBeanFactory")]),a._v(" 和 "),t("code",[a._v("ListableBeanFactory")]),a._v("，是集全部 "),t("code",[a._v("BeanFactory")]),a._v(" 接口之大成者。\n它的最底层实现类是 "),t("code",[a._v("DefaultListableBeanFactory")]),a._v("，它直接或间接实现了所有 "),t("code",[a._v("BeanFactory")]),a._v(" 接口，是在项目中最常用的实现类。\n在 3.1 以及更早的版本之前，Spring 提供了 XmlBeanFactory 它是 DefaultListableBeanFactory 唯一一个子类，等同于在前者的基础上附加一个从 XML 文件加载 Bean 定义的功能。\n不过，在更高版本 Spring 则推荐直接使用 ApplicationContext + DefaultListableBeanFactory 的方案，BeanFactory 回归单一职责，只负责管理 Bean，而资源的加载则交给 ApplicationContext实现的其他接口。")])]),a._v(" "),t("blockquote",[t("p",[a._v("顺带一提，关于如何基于 AutowireCapableBeanFactory 对非 Spring 管理的对象进行依赖注入，请参见："),t("strong",[a._v("todo")])])]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"singletonbeanregistry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#singletonbeanregistry"}},[a._v("#")]),a._v(" SingletonBeanRegistry")]),a._v(" "),t("p",[t("code",[a._v("SingletonBeanRegistry")]),a._v(" 表示表示单例 Bean 的注册表，它是一个顶级接口，实现该接口的类具备管理单例 Bean 的功能。"),t("code",[a._v("ConfigurableBeanFactory")]),a._v("接口继承了它，因此所有的 "),t("code",[a._v("BeanFactory")]),a._v(" 对单例 Bean 的管理功能都源于此。\n从 "),t("code",[a._v("SingletonBeanRegistry")]),a._v(" 的体系来说，主要分为两层：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("DefaultSingletonBeanRegistry")]),a._v("：它是 SingletonBeanRegistry 的通常实现，我们经常提到的三级缓存实际上就是在它里面，单例 Bean 的销毁操作也要基于它完成。")]),a._v(" "),t("li",[t("code",[a._v("BeanFactoryRegisterSupport")]),a._v("：它是基于 DefaultSingletonBeanRegistry 扩展的抽象类，用于在前者的基础上额外为 "),t("code",[a._v("FactoryBean")]),a._v(" 提供支持（毕竟 "),t("code",[a._v("FactoryBean")]),a._v(" 也可以算是单例 Bean）。它的内部有一个 "),t("code",[a._v("factoryBeanObjectCache")]),a._v("，FactoryBean 的单例产物就缓存于此。\n"),t("code",[a._v("DefaultSingletonBeanRegistry")]),a._v(" 为所有的 BeanFactory 提供了管理单例的能力，而 "),t("code",[a._v("BeanFactoryRegisterSupport")]),a._v(" 则令 BeanFactory 在前者的基础上具备管理 "),t("code",[a._v("FactoryBean")]),a._v(" 产物的能力。")])]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"beandefinitionregistry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinitionregistry"}},[a._v("#")]),a._v(" BeanDefinitionRegistry")]),a._v(" "),t("p",[t("code",[a._v("BeanDefinitionRegistry")]),a._v(" 是 Spring 中用于注册和管理 bean 定义的接口。\nbean 定义即 "),t("code",[a._v("BeanDefinition")]),a._v("，它相当于 Spring 容器中 Bean 的元数据，它可以告知 Spring 容器这个 Bean 里面具备哪些属性，具备哪些方法，需要哪些依赖，要如何创建……等等，它与 Bean 的关系等同于 Java 类与根据类创建出的对象的关系。")]),a._v(" "),t("blockquote",[t("p",[a._v("关于 BeanDefinition，具体请参见："),t("strong",[a._v("todo")]),a._v(": 什么是 BeanDefinition？")])]),a._v(" "),t("p",[a._v("Spring 的 "),t("code",[a._v("BeanFactory")]),a._v(" 接口体系中并没有接口继承它，不过 "),t("code",[a._v("BeanFactory")]),a._v(" 体系中最底层，也是最常用的实现类 "),t("code",[a._v("DefaultListableBeanFactory")]),a._v(" 实现了这个接口。\n除此之外， "),t("code",[a._v("ApplicationContext")]),a._v(" 的通用实现类 "),t("code",[a._v("GenericApplicationContext")]),a._v(" 也实现了这个接口，而大部分的 "),t("code",[a._v("ApplicationContext")]),a._v(" 又继承了 "),t("code",[a._v("GenericApplicationContext。")]),a._v("\n总而言之， "),t("code",[a._v("BeanDefinitionRegistry")]),a._v(" 和前两者一样，都是 Spring 容器体系中的重要组成部分。")]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"factorybean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#factorybean"}},[a._v("#")]),a._v(" FactoryBean")]),a._v(" "),t("p",[a._v("Spring 中的 "),t("code",[a._v("FactoryBean")]),a._v(" 是一个特殊的接口，实现了该接口的 Bean 变为专门用来创建某种特定类型对象的工厂。\n"),t("a",{attrs:{href:"./Spring-registerBean"}},[a._v("如何向Spring注册bean之FactoryBean使用")])]),a._v(" "),t("p",[a._v("当你将一个实现了 FactoryBean 接口的类注册到 Spring 容器时，Spring 会默认调用其 getObject 方法来获取实际的 bean 实例。FactoryBean 接口定义了一个方法 getObject，该方法返回由 FactoryBean 所管理的实际 bean 实例。")]),a._v(" "),t("p",[a._v("当你在 Spring 容器中声明一个 FactoryBean 的实现类时，实际上容器中注册的是 FactoryBean 的实例而不是其 getObject 方法返回的对象。Spring 容器在需要获取该 bean 实例时，会调用 FactoryBean 的 getObject 方法，以获取实际的 bean 实例。")]),a._v(" "),t("p",[a._v("这种机制允许 FactoryBean 在创建 bean 实例时进行一些复杂的逻辑，例如根据特定条件来决定返回不同的 bean 实例，或者在返回实例之前进行一些初始化操作。")]),a._v(" "),t("p",[a._v("它被广泛用于创建一些：")]),a._v(" "),t("ul",[t("li",[a._v("无法通过正常的构造函数创建的对象：比较典型的是各种代理，比如 Dubbo 使用 "),t("code",[a._v("ReferenceBean")]),a._v(" 创建 RPC 接口的代理对象，Mybatis 使用 "),t("code",[a._v("MapperFactoryBean")]),a._v(" 来创建 Mapper 接口代理。")]),a._v(" "),t("li",[a._v("创建过程比较复杂的对象：比较典型的是 "),t("code",[a._v("SqlSession")]),a._v(" ， 比如 JPA 和 Myabtis 都选择通过一个 "),t("code",[a._v("SqlSessionFactoryBean")]),a._v(" 来创建它。\n该接口中定义了三个方法，分别是：")]),a._v(" "),t("li",[a._v("getObject ：用于从工厂中获取一个 Bean 实例。")]),a._v(" "),t("li",[a._v("getObjectType：获取实例的类型。")]),a._v(" "),t("li",[a._v("isSingleton：判断这个 Bean 是否是单例的。（默认值为true）")])]),a._v(" "),t("p",[a._v("通常情况下，如果 "),t("code",[a._v("FactoryBean")]),a._v(" 的 isSingleton 方法返回 true，则其生产的对象就会是单例的，反之则为多例的。不过，如果 "),t("code",[a._v("FactoryBean")]),a._v(" 本身是多例的，那么无论isSingleton 方法是否返回 true， 其产物也将变为多例的。\n我们可以通过 "),t("code",[a._v("FactoryBean")]),a._v(" 的 beanName 从 Spring 容器获得其生产的对象，而当需要从 Spring 容器中获取 "),t("code",[a._v("FactoryBean")]),a._v(" 本身时，需要在 beanName 前加 & 符号。")]),a._v(" "),t("h3",{attrs:{id:"factorybean-的-beanname-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#factorybean-的-beanname-机制"}},[a._v("#")]),a._v(" FactoryBean 的 beanName 机制")]),a._v(" "),t("p",[a._v("我们都知道，Spring 容器中所有的 Bean 都有独一无二的 beanName 作为唯一标识，而 "),t("code",[a._v("FactoryBean")]),a._v(" 作为一种特殊的 Bean，它的 beanName 代表的除了 "),t("code",[a._v("FactoryBean")]),a._v(" 本身外，还代表它的产物 Bean。\n在正常情况下，当我们从 Spring 容器通过 "),t("code",[a._v("FactoryBean")]),a._v(" 的 beanName 获取 Bean 时，将会得到 "),t("code",[a._v("FactoryBean")]),a._v(" 生产的产品，而不是 "),t("code",[a._v("FactoryBean")]),a._v(" 本身，如果要获得 "),t("code",[a._v("FactoryBean")]),a._v(" 本身，则需要在 beanName 前面加一个 '&' 号。\n例如：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"创建了一个Foo!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObjectType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Example")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过 'foo' 获得产物 Foo")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Foo")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过 '&foo' 获得 FooFactoryBean")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" fooFactoryBean "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"&foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br")])]),t("blockquote",[t("p",[a._v("源码中的 "),t("code",[a._v("AbstractBeanFactory")]),a._v(" 有一个专门的方法 "),t("code",[a._v("transformedBeanName")]),a._v(" 用来干这件事情，它在 "),t("code",[a._v("doGetBean")]),a._v(" 方法中调用。")])]),a._v(" "),t("p",[a._v("此外，由于 Spring 只管理 "),t("code",[a._v("FactoryBean")]),a._v(" 本身的生命周期而不关心其产物的生命周期， 因此如果你的 "),t("code",[a._v("FactoryBean")]),a._v(" 的产物本身还是一个 "),t("code",[a._v("FactoryBean")]),a._v(" ，那实际就产物的就会被视为一个普通的 Bean，而不会视为一个 "),t("code",[a._v("FactoryBean。")])]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在上述基础上再套娃一层")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBeanFactoryBean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"创建了一个FooFactoryBean!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObjectType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Example")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过 'foo' 获得产物 FactoryBean")]),a._v("\n        context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// == FooFactoryBean")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过 '&foo' 获得 FooFactoryBeanFactoryBean")]),a._v("\n        context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"&foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// == FooFactoryBeanFactoryBean")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br")])]),t("p",[a._v("在上面这个例子中，我们通过 "),t("code",[a._v("foo")]),a._v(" 只能够得到下一级产物 "),t("code",[a._v("FooFactoryBean")]),a._v(" ，而无法真正的得到我们想要的最下级产物 "),t("code",[a._v("Foo")])]),a._v(" "),t("h3",{attrs:{id:"生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[a._v("#")]),a._v(" 生命周期")]),a._v(" "),t("p",[a._v("按源码中的注释来说，"),t("code",[a._v("Spring")]),a._v(" 只管理 "),t("code",[a._v("FactoryBean")]),a._v(" 的生命周期，而不管理其产物的生命周期。\n简而言之，"),t("code",[a._v("FactoryBean")]),a._v("本身像普通的 Bean 一样，会经过各种 "),t("code",[a._v("BeanPostProcessor")]),a._v(" 的后处理，并且也支持 "),t("code",[a._v("InitializingBean、DisposableBean")]),a._v(" 以及 "),t("code",[a._v("Aware")]),a._v(" 等各种回调接口。\n而对于 "),t("code",[a._v("FactoryBean")]),a._v(" 的产物来说，它则除了 "),t("code",[a._v("BeanPostProcessor")]),a._v(" 的 "),t("code",[a._v("postProcessAfterInitialization")]),a._v(" 外皆不支持。\n这一部分内容在源码中的 "),t("code",[a._v("FactoryBeanRegistrySupport")]),a._v("."),t("code",[a._v("getObjectFromFactoryBean")]),a._v(" 方法可以找到答案：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObjectFromFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" shouldPostProcess"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ... ...")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" object "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("doGetObjectFromFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("shouldPostProcess"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对产物进行后处理")]),a._v("\n            object "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("postProcessObjectFromFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),a._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeanCreationException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Post-processing of FactoryBean\'s object failed"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ... ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// AbstractAutowireCapableBeanFactory 实现了这个方法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("postProcessObjectFromFactoryBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用 BeanPostProcessor 的 postProcessAfterInitialization 方法")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("applyBeanPostProcessorsAfterInitialization")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br")])]),t("p",[t("strong",[a._v("作用有限的后处理")]),a._v("\n实际上，由于缺少前置步骤 "),t("code",[a._v("postProcessBeforeInitialization")]),a._v(" 而只有后置步骤 "),t("code",[a._v("postProcessAfterInitialization")]),a._v(" ，这导致而很多需要两步协作的后处理器无法正常生效。\n例如，用于依赖注入的 "),t("code",[a._v("AutowiredAnnotationBeanPostProcessor")]),a._v(" 后处理器无法正常处理它，因此产物 Bean 无法基于 "),t("code",[a._v("@Autowired")]),a._v(" 注解进行依赖注入。\n不过，还是有一些仅依赖后置步骤的处理器是可以生效的，比如几个基于 "),t("code",[a._v("AbstractAdvisingBeanPostProcessor")]),a._v(" 实现后处理器：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("AsyncAnnotationBeanPostProcessor")]),a._v(" ：用于基于 @Async注解实现异步调用。")]),a._v(" "),t("li",[t("code",[a._v("MethodValidationPostProcessor")]),a._v(" ：基于 JSR303 注解实现参数校验（比如我们属性的 @NotNull）。")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FooFactoryBean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"创建了一个Foo!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObjectType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 添加 @Async 注解，则 Foo 将会被 Spring 代理")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" applicationContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Async")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Example")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取的 foo 被 Spring 代理了")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Test$FooFactoryBean$Foo$$EnhancerBySpringCGLIB$$7887ae4f")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br")])]),t("hr"),a._v(" "),t("h3",{attrs:{id:"作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[a._v("#")]),a._v(" 作用域")]),a._v(" "),t("p",[t("code",[a._v("FactoryBean")]),a._v(" 的作用域可以像正常的 Bean 那样通过 @Scope 配置，而对于它的产物则需要通过内部的 "),t("code",[a._v("isSingleton")]),a._v(" 方法来控制。")]),a._v(" "),t("p",[a._v("当然，事无绝对，如果我们把 "),t("code",[a._v("FactoryBean")]),a._v(" 设置为多例的，那么即使 "),t("code",[a._v("isSingleton")]),a._v(" 返回 true，两者也依然都是多例的。")]),a._v(" "),t("p",[a._v("这一块的逻辑实际上由 FactoryBeanRegistrySupport.getObjectFromFactoryBean 方法控制，在这个方法中，Spring 检查的目标 "),t("code",[a._v("FactoryBean")]),a._v(" 是否是单例的，如果是单例的则尝试从缓存中获取，否则直接创建一个新的。")]),a._v(" "),t("h3",{attrs:{id:"产物的加载时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#产物的加载时机"}},[a._v("#")]),a._v(" 产物的加载时机")]),a._v(" "),t("p",[a._v("我们知道，Spring 中的单例 Bean 会在容器启动的时候通过 "),t("code",[a._v("ConfigurableListableBeanFactory.preInstantiateSingletons")]),a._v(" 全部加载，而 "),t("code",[a._v("FactoryBean")]),a._v(" 的产物则与普通的 Bean 有所不同：")]),a._v(" "),t("ul",[t("li",[a._v("延迟加载：在正常情况下，产物 Bean 并不会随其他正常的 Bean 初始化，只会在被从 Spring 容器中获取的时候才会触发，比如被依赖注入到其他的 Bean 里。")]),a._v(" "),t("li",[t("code",[a._v("SmartFactoryBean")]),a._v(" 中显式指定提前初始化：如果 "),t("code",[a._v("FactoryBean")]),a._v(" 又实现了 "),t("code",[a._v("SmartFactoryBean")]),a._v(" 接口，并重写 "),t("code",[a._v("isEagerInit")]),a._v(" 方法令其返回 true，那么它将会在它的 "),t("code",[a._v("FactoryBean")]),a._v(" 初始化后进行初始化。")]),a._v(" "),t("li",[a._v("获取产物 Bean 类型导致提前初始化：如果 "),t("code",[a._v("FactoryBean")]),a._v(" 的 "),t("code",[a._v("getBeanType")]),a._v(" 返回 null，那么当调用 "),t("code",[a._v("BeanFactory")]),a._v(" 的 "),t("code",[a._v("getType")]),a._v(" 或 "),t("code",[a._v("isTypeMatch")]),a._v(" 方法时，Spring 就会直接尝试创建一个产物 Bean 出来再获取实际类型，此时就可能会导致提前初始化。\n第三点尤其需要注意，当我们调用容器的一些需要获取类型的方法时（比如 "),t("code",[a._v("ListableBeanFactory.getBeanNamesForType")]),a._v("），都会有提前初始化的风险。")])]),a._v(" "),t("h3",{attrs:{id:"循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖"}},[a._v("#")]),a._v(" 循环依赖")]),a._v(" "),t("p",[t("code",[a._v("FactoryBean")]),a._v(" 同样会有循环依赖问题，比如 "),t("code",[a._v("FactoryBean")]),a._v(" 本身依赖另一个 Bean，而这个 Bean 又依赖从 "),t("code",[a._v("FactoryBean")]),a._v(" 获得的产物。\n这里 Spring 同样是通过缓存机制解决，不过与普通 Bean 不同，产物 Bean 由于不考虑代理也不考虑初始化问题，因此只使用了 "),t("code",[a._v("factoryBeanObjectCache")]),a._v(" 这一级缓存来解决问题。")]),a._v(" "),t("h3",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),t("p",[t("code",[a._v("FactoryBean")]),a._v(" 一般适用于两种场景：")]),a._v(" "),t("ul",[t("li",[a._v("创建无法通过正常的构造函数创建的对象：比较典型的是各种代理，比如 Dubbo 使用 ReferenceBean 创建 RPC 接口的代理对象，Mybatis 使用 MapperFactoryBean 来创建 Mapper 接口代理。")]),a._v(" "),t("li",[a._v("创建过程比较复杂的对象：比较典型的是 SqlSession， 比如 JPA 和 Myabtis 都选择通过一个 SqlSessionFactoryBean 来创建它。\n这两个优点再概括一下，就是灵活，这里举几个例子：")]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("FactoryBean")]),a._v(" 创建对象可以不需要目标类一定有一个公开的构造方法，我们可以随意的通过任何方式来创建一个对象，比如动态代理，或者直接返回一个静态对象。")]),a._v(" "),t("li",[a._v("由于产物不需要被 Spring 管理，所以也不需要担心和其他 Bean 有什么依赖关系，不需要担心与 Spring 容器中的其他 Bean 共享某些组件导致问题。")]),a._v(" "),t("li",[t("code",[a._v("FactoryBean")]),a._v(" 本身可以用来作为第三方框架的集成切入点，比如 Mybatis 在创建 Mapper 代理类之前需要先初始化非常多的组件，然而通过 FactoryBean，它不需要将所有的组件交给 Spring 管理，而仅需要把这个过程使用 "),t("code",[a._v("FactoryBean")]),a._v(" 封装一下就可以与 Spring 直接集成了。\n简而言之，"),t("code",[a._v("FactoryBean")]),a._v(" 是一个针对特定场景的解决方案，在实际的项目中，当我们比起直接使用构造方法，而更倾向使用工厂方法去创建一个 Bean 的时候，就可以考虑使用 FactoryBean 了。")])]),a._v(" "),t("h2",{attrs:{id:"beanfactory和factorybean的区别-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory和factorybean的区别-2"}},[a._v("#")]),a._v(" BeanFactory和FactoryBean的区别")]),a._v(" "),t("p",[a._v('BeanFactory 是 Spring 容器的顶级接口，它表示 Spring 框架中用于管理 Bean 生命周期的核心组件，被官方称为 IOC 容器。\n它负责创建、配置和管理程序中所有的 Bean 实例。甚至 ApplicationContext 都是它的子接口，因此，从某种程度上来说，我们一般提到的 "Spring 容器" 其实指就是它。')]),a._v(" "),t("p",[a._v("FactoryBean 也是 Spring 提供的接口，实现了这个接口的 Bean 会被用于创建某种特定类型的对象。\n它被广泛用于创建一些：")]),a._v(" "),t("ul",[t("li",[a._v("无法通过正常的构造函数创建的对象：比较典型的是各种代理，比如 Dubbo 使用 "),t("code",[a._v("ReferenceBean")]),a._v(" 创建 RPC 接口的代理对象，Mybatis 使用 "),t("code",[a._v("MapperFactoryBean")]),a._v(" 来创建 Mapper 接口代理。")]),a._v(" "),t("li",[a._v("创建过程比较复杂的对象：比较典型的是 SqlSession， 比如 JPA 和 Myabtis 都选择通过一个 SqlSessionFactoryBean 来创建它。\n某种程度上来说，它和 BeanFactory 都能用于创建对象，不过它在使用上会更灵活一些。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);